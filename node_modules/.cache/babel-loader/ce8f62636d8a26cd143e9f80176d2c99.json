{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Input } from \"@chakra-ui/core\";\nimport { randomKey } from \"../../__mocks__\";\n\nconst Inputs = ({\n  value,\n  handleChange\n}) => {\n  for (let i = 0; i < 9; i++) {\n    let letter = randomKey;\n    return /*#__PURE__*/_jsxDEV(Input, {\n      size: \"lg\",\n      type: \"text\",\n      placeholder: letter,\n      w: \"3rem\",\n      value: value,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, this);\n  }\n};\n\n_c = Inputs;\nexport const Exercise = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [error, setError] = useState(0);\n  const [valid, setValid] = useState(0);\n\n  const handleChange = onKeyPress => {\n    if (onKeyPress.target.value === letter) {\n      setValue(onKeyPress.target.value);\n      setValid(valid + 1);\n    } else {\n      setError(error + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Try this first Exercise: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(Inputs, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [valid, \" valids | \", error, \" errors\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Exercise, \"S0vjEblv85UdOhvvPXlrUAGDTjU=\");\n\n_c2 = Exercise;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Inputs\");\n$RefreshReg$(_c2, \"Exercise\");","map":{"version":3,"sources":["/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx"],"names":["React","useState","Input","randomKey","Inputs","value","handleChange","i","letter","Exercise","setValue","error","setError","valid","setValid","onKeyPress","target"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,SAAT,QAA0B,iBAA1B;;AAGA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAuF;AAClG,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,QAAIC,MAAM,GAAGL,SAAb;AACA,wBAAO,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,IAAZ;AAAiB,MAAA,IAAI,EAAC,MAAtB;AAA6B,MAAA,WAAW,EAAEK,MAA1C;AAAkD,MAAA,CAAC,EAAC,MAApD;AAA2D,MAAA,KAAK,EAAEH,KAAlE;AAAyE,MAAA,QAAQ,EAAEC;AAAnF;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AACJ,CALD;;KAAMF,M;AAMN,OAAO,MAAMK,QAAQ,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,CAAD,CAAlC;;AACA,QAAMK,YAAY,GAAIS,UAAD,IAAqB;AACtC,QAAIA,UAAU,CAACC,MAAX,CAAkBX,KAAlB,KAA4BG,MAAhC,EAAwC;AACpCE,MAAAA,QAAQ,CAACK,UAAU,CAACC,MAAX,CAAkBX,KAAnB,CAAR;AACAS,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH,KAHD,MAGO;AAAED,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AAAqB;AACjC,GALD;;AAQA,sBACI;AAAA,yDAC6B;AAAA;AAAA;AAAA;AAAA,YAD7B,eAEI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,iBAAME,KAAN,gBAAuBF,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAnBM;;GAAMF,Q;;MAAAA,Q","sourcesContent":["import React, { useState } from \"react\";\nimport { Input } from \"@chakra-ui/core\";\nimport { randomKey } from \"../../__mocks__\";\n\n\nconst Inputs = ({ value, handleChange }: { value: string; handleChange: any }): React.ReactElement => {\n    for (let i = 0; i < 9; i++) {\n        let letter = randomKey;\n        return <Input size=\"lg\" type=\"text\" placeholder={letter} w=\"3rem\" value={value} onChange={handleChange} />\n    }\n}\nexport const Exercise = () => {\n    const [value, setValue] = useState(\"\");\n    const [error, setError] = useState(0);\n    const [valid, setValid] = useState(0);\n    const handleChange = (onKeyPress: any) => {\n        if (onKeyPress.target.value === letter) {\n            setValue(onKeyPress.target.value);\n            setValid(valid + 1)\n        } else { setError(error + 1) }\n    }\n\n\n    return (\n        <div>\n            Try this first Exercise: <br />\n            <Inputs />\n            <div>{valid} valids | {error} errors</div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}