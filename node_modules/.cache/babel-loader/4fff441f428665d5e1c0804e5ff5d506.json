{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, forwardRef, useRef } from \"react\";\nimport { Input } from \"@chakra-ui/core\";\nimport { keys } from \"../../__mocks__\";\nimport { Button } from \"../../stories/Button\";\nexport const getRandomKey = () => {\n  return keys[Math.floor(Math.random() * keys.length)];\n};\nconst SingleInput = /*#__PURE__*/forwardRef(_c = ({\n  handleChange,\n  keyValue,\n  placeholder,\n  id\n}, ref) => {\n  return /*#__PURE__*/_jsxDEV(Input, {\n    id: id,\n    name: \"\",\n    size: \"lg\",\n    type: \"text\",\n    placeholder: placeholder,\n    w: \"3rem\",\n    value: keyValue,\n    onChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n});\n_c2 = SingleInput;\nexport const Exercise = () => {\n  _s();\n\n  const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\"]);\n  const [targetsKeyValues, setTargetsKeyValue] = useState([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n  const [error, setError] = useState(0);\n  const [valid, setValid] = useState(0);\n  let focusRef0 = useRef(null);\n  let focusRef1 = useRef(null);\n  let focusRef2 = useRef(null);\n  let focusRef3 = useRef(null);\n\n  const handleChange = index => onKeyPress => {\n    if (onKeyPress.target.value === targetsKeyValues[index]) {\n      setKeyValue(previousArray => {\n        const newArray = [...previousArray];\n        newArray[index] = onKeyPress.target.value;\n        return newArray;\n      });\n      setValid(valid + 1);\n\n      if (index === 0) {\n        return focusRef1.current.focus();\n      } else if (index === 1) {\n        return focusRef2.current.focus();\n      } else if (index === 2) {\n        return focusRef3.current.focus();\n      } else {\n        return null;\n      }\n    } else {\n      setError(error + 1);\n    }\n  };\n\n  const reset = useCallback(() => {\n    setTargetsKeyValue([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Try this first Exercise: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef0,\n      handleChange: handleChange(0),\n      keyValue: keyValues[0],\n      placeholder: targetsKeyValues[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef1,\n      handleChange: handleChange(1),\n      keyValue: keyValues[1],\n      placeholder: targetsKeyValues[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef2,\n      handleChange: handleChange(2),\n      keyValue: keyValues[2],\n      placeholder: targetsKeyValues[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef3,\n      handleChange: handleChange(3),\n      keyValue: keyValues[3],\n      placeholder: targetsKeyValues[3]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [valid, \" valids | \", error, \" errors\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: \"Go to next exercise\",\n      onClick: reset,\n      children: \"Go to next exercise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}; //change valid, error and key value when reset\n//div aria-label with the text around the inputs and inputs with aria-labels:none\n\n_s(Exercise, \"+UlF+yNJ4/N8RmOxD1ZlHGtCXWA=\");\n\n_c3 = Exercise;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SingleInput$forwardRef\");\n$RefreshReg$(_c2, \"SingleInput\");\n$RefreshReg$(_c3, \"Exercise\");","map":{"version":3,"sources":["/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx"],"names":["React","useCallback","useState","forwardRef","useRef","Input","keys","Button","getRandomKey","Math","floor","random","length","SingleInput","handleChange","keyValue","placeholder","id","ref","Exercise","keyValues","setKeyValue","targetsKeyValues","setTargetsKeyValue","error","setError","valid","setValid","focusRef0","focusRef1","focusRef2","focusRef3","index","onKeyPress","target","value","previousArray","newArray","current","focus","reset"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, forwardRef, useRef } from \"react\";\nimport { Input } from \"@chakra-ui/core\";\nimport { keys } from \"../../__mocks__\";\nimport { Button } from \"../../stories/Button\";\n\nexport const getRandomKey = (): string => { return keys[Math.floor(Math.random() * keys.length)] };\n\nconst SingleInput = forwardRef(({ handleChange, keyValue, placeholder, id }: { handleChange: any, keyValue: string, placeholder: string, id: string }, ref) => {\n\n    return (\n        <Input id={id} name=\"\" size=\"lg\" type=\"text\" placeholder={placeholder} w=\"3rem\" value={keyValue} onChange={handleChange} />\n    )\n});\n\nexport const Exercise = () => {\n    const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\"]);\n    const [targetsKeyValues, setTargetsKeyValue] = useState([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n    const [error, setError] = useState(0);\n    const [valid, setValid] = useState(0);\n    let focusRef0 = useRef(null)\n    let focusRef1 = useRef(null)\n    let focusRef2 = useRef(null)\n    let focusRef3 = useRef(null)\n    const handleChange = (index: number) => (onKeyPress: any) => {\n        if (onKeyPress.target.value === targetsKeyValues[index]) {\n            setKeyValue((previousArray: string[]): string[] => {\n                const newArray = [...previousArray];\n                newArray[index] = onKeyPress.target.value;\n                return newArray;\n            });\n            setValid(valid + 1);\n            if (index === 0) {\n                return focusRef1.current.focus()\n            } else if (index === 1) {\n                return focusRef2.current.focus()\n            } else if (index === 2) {\n                return focusRef3.current.focus()\n            } else {\n                return null\n            }\n        } else {\n            setError(error + 1);\n        }\n    }\n    const reset = useCallback(() => { setTargetsKeyValue([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]) }, []);\n    return (\n        <div>\n            Try this first Exercise: <br />\n            <SingleInput ref={focusRef0} handleChange={handleChange(0)} keyValue={keyValues[0]} placeholder={targetsKeyValues[0]} />\n            <SingleInput ref={focusRef1} handleChange={handleChange(1)} keyValue={keyValues[1]} placeholder={targetsKeyValues[1]} />\n            <SingleInput ref={focusRef2} handleChange={handleChange(2)} keyValue={keyValues[2]} placeholder={targetsKeyValues[2]} />\n            <SingleInput ref={focusRef3} handleChange={handleChange(3)} keyValue={keyValues[3]} placeholder={targetsKeyValues[3]} />\n            <div>{valid} valids | {error} errors</div>\n            <Button label={\"Go to next exercise\"} onClick={reset} >Go to next exercise</Button>\n        </div>\n    )\n}\n\n//change valid, error and key value when reset\n//div aria-label with the text around the inputs and inputs with aria-labels:none"]},"metadata":{},"sourceType":"module"}