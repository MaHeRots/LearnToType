{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, forwardRef, useRef } from \"react\";\nimport { Input, Button } from \"@chakra-ui/core\";\nimport { keys, ignoredKeys } from \"../../__mocks__\";\n\nconst getRandomKey = () => {\n  return keys[Math.floor(Math.random() * keys.length)];\n};\n\nconst SingleInput = /*#__PURE__*/forwardRef(_c = ({\n  handleChange,\n  keyValue,\n  placeholder\n}, ref) => {\n  return /*#__PURE__*/_jsxDEV(Input, {\n    ref: ref,\n    name: \"\",\n    size: \"lg\",\n    type: \"text\",\n    placeholder: placeholder,\n    w: \"3rem\",\n    value: keyValue,\n    onChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n});\n_c2 = SingleInput;\nlet onKeyPressCount = 0;\n\nfunction runTimer(timer) {\n  timer[3]++;\n  timer[0] = Math.floor(timer[3] / 100 / 60);\n  timer[1] = Math.floor(timer[3] / 100 - timer[0] * 60);\n  timer[2] = Math.floor(timer[3] - timer[1] * 100 - timer[0] * 6000);\n  console.log(`${timer[0]}h ${timer[1]}m ${timer[2]}s`);\n  return `${timer[0]}h ${timer[1]}m ${timer[2]}s`;\n}\n\nexport const Exercise = () => {\n  _s();\n\n  const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\"]);\n  const [timer, setTimer] = useState([0, 0, 0, 0]);\n  const [targetsKeyValues, setTargetsKeyValue] = useState([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n  const [error, setError] = useState(0);\n  const [valid, setValid] = useState(0);\n  const focusRef0 = useRef(null);\n  const focusRef1 = useRef(null);\n  const focusRef2 = useRef(null);\n  const focusRef3 = useRef(null);\n  const focusRef4 = useRef(null);\n\n  const start = () => {\n    console.log(\"start the timer\");\n    setInterval(runTimer, 10);\n  };\n\n  const stop = () => {\n    console.log(\"stop the timer\");\n  };\n\n  const reset = () => {\n    console.log(\"reset the game\");\n  };\n\n  const handleChange = index => onKeyPress => {\n    if (ignoredKeys.some(key => key === onKeyPress.target.value)) {\n      console.log(\"Sorry, sorry, sorry, sorry, 내가 내가 내가 먼저...\");\n    } else {\n      if (onKeyPress.target.value === targetsKeyValues[index]) {\n        setKeyValue(previousArray => {\n          const newArray = [...previousArray];\n          newArray[index] = onKeyPress.target.value;\n          return newArray;\n        });\n        setValid(valid + 1);\n        onKeyPressCount = onKeyPressCount + 1;\n\n        if (index === 0) {\n          start();\n          focusRef1.current.focus();\n        } else if (index === 1) {\n          focusRef2.current.focus();\n        } else if (index === 2) {\n          focusRef3.current.focus();\n        } else {\n          focusRef4.current.focus();\n          stop();\n        }\n      } else {\n        start();\n        setError(error + 1);\n        onKeyPressCount = onKeyPressCount + 1;\n      }\n    }\n  };\n\n  const update = useCallback(() => {\n    setTargetsKeyValue([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n    setKeyValue([\"\", \"\", \"\", \"\"]);\n    focusRef0.current.focus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Click in the first input to start the game! \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 57\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef0,\n      handleChange: handleChange(0),\n      keyValue: keyValues[0],\n      placeholder: targetsKeyValues[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef1,\n      handleChange: handleChange(1),\n      keyValue: keyValues[1],\n      placeholder: targetsKeyValues[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef2,\n      handleChange: handleChange(2),\n      keyValue: keyValues[2],\n      placeholder: targetsKeyValues[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef3,\n      handleChange: handleChange(3),\n      keyValue: keyValues[3],\n      placeholder: targetsKeyValues[3]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error, \" errors | \", onKeyPressCount === 0 ? 0 : valid / onKeyPressCount * 100, \"% | \", /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"timer\",\n        children: runTimer(timer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 98\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      ref: focusRef4,\n      label: \"Go to next exercise\",\n      onClick: update,\n      colorScheme: \"teal\",\n      children: \"Next bunch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: \"Start Over\",\n      onClick: reset,\n      children: \"Start Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}; // able tab key only on the input that you should complete\n// disable copy/paste\n\n_s(Exercise, \"XXQAgJxmUsUYCuKXL12OSH+HBTw=\");\n\n_c3 = Exercise;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SingleInput$forwardRef\");\n$RefreshReg$(_c2, \"SingleInput\");\n$RefreshReg$(_c3, \"Exercise\");","map":{"version":3,"sources":["/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx"],"names":["React","useCallback","useState","forwardRef","useRef","Input","Button","keys","ignoredKeys","getRandomKey","Math","floor","random","length","SingleInput","handleChange","keyValue","placeholder","ref","onKeyPressCount","runTimer","timer","console","log","Exercise","keyValues","setKeyValue","setTimer","targetsKeyValues","setTargetsKeyValue","error","setError","valid","setValid","focusRef0","focusRef1","focusRef2","focusRef3","focusRef4","start","setInterval","stop","reset","index","onKeyPress","some","key","target","value","previousArray","newArray","current","focus","update"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, forwardRef, useRef } from \"react\";\nimport { Input, Button } from \"@chakra-ui/core\";\nimport { keys, ignoredKeys } from \"../../__mocks__\";\n\nconst getRandomKey = (): string => { return keys[Math.floor(Math.random() * keys.length)] };\n\nconst SingleInput = forwardRef(({ handleChange, keyValue, placeholder }: { handleChange: any, keyValue: string, placeholder: string }, ref: any) => {\n\n    return (\n        <Input ref={ref} name=\"\" size=\"lg\" type=\"text\" placeholder={placeholder} w=\"3rem\" value={keyValue} onChange={handleChange} />\n    )\n});\n\nlet onKeyPressCount = 0;\n\nfunction runTimer(timer: number[]) {\n    timer[3]++;\n    timer[0] = Math.floor((timer[3] / 100) / 60);\n    timer[1] = Math.floor((timer[3] / 100) - (timer[0] * 60));\n    timer[2] = Math.floor(timer[3] - (timer[1] * 100) - (timer[0] * 6000));\n    console.log(`${timer[0]}h ${timer[1]}m ${timer[2]}s`);\n    return `${timer[0]}h ${timer[1]}m ${timer[2]}s`;\n}\nexport const Exercise = () => {\n    const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\"]);\n    const [timer, setTimer] = useState([0, 0, 0, 0]);\n    const [targetsKeyValues, setTargetsKeyValue] = useState([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n\n    const [error, setError] = useState(0);\n    const [valid, setValid] = useState(0);\n\n    const focusRef0: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef1: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef2: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef3: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef4: React.RefObject<HTMLInputElement> = useRef(null);\n\n\n    const start = () => {\n        console.log(\"start the timer\");\n        setInterval(runTimer, 10);\n    };\n\n    const stop = () => {\n        console.log(\"stop the timer\")\n    };\n\n    const reset = () => {\n        console.log(\"reset the game\")\n    }\n    const handleChange = (index: number) => (onKeyPress: any) => {\n        if (ignoredKeys.some(key => key === onKeyPress.target.value)) {\n            console.log(\"Sorry, sorry, sorry, sorry, 내가 내가 내가 먼저...\");\n        } else {\n            if (onKeyPress.target.value === targetsKeyValues[index]) {\n                setKeyValue((previousArray: string[]): string[] => {\n                    const newArray = [...previousArray];\n                    newArray[index] = onKeyPress.target.value;\n                    return newArray;\n                });\n                setValid(valid + 1);\n                onKeyPressCount = onKeyPressCount + 1;\n                if (index === 0) {\n                    start();\n                    focusRef1.current!.focus();\n                } else if (index === 1) {\n                    focusRef2.current!.focus();\n                } else if (index === 2) {\n                    focusRef3.current!.focus();\n                } else {\n                    focusRef4.current!.focus();\n                    stop();\n                }\n            } else {\n                start();\n                setError(error + 1);\n                onKeyPressCount = onKeyPressCount + 1;\n            }\n        }\n    };\n\n    const update = useCallback(() => {\n        setTargetsKeyValue([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n        setKeyValue([\"\", \"\", \"\", \"\"]);\n        focusRef0.current!.focus();\n    }, []);\n\n    return (\n        <div>\n            Click in the first input to start the game! <br />\n            <SingleInput ref={focusRef0} handleChange={handleChange(0)} keyValue={keyValues[0]} placeholder={targetsKeyValues[0]} />\n            <SingleInput ref={focusRef1} handleChange={handleChange(1)} keyValue={keyValues[1]} placeholder={targetsKeyValues[1]} />\n            <SingleInput ref={focusRef2} handleChange={handleChange(2)} keyValue={keyValues[2]} placeholder={targetsKeyValues[2]} />\n            <SingleInput ref={focusRef3} handleChange={handleChange(3)} keyValue={keyValues[3]} placeholder={targetsKeyValues[3]} />\n            <div>{error} errors | {onKeyPressCount === 0 ? 0 : valid / onKeyPressCount * 100}% | <p className=\"timer\">{runTimer(timer)}</p></div>\n            {/* @ts-ignore */}\n            <Button ref={focusRef4} label={\"Go to next exercise\"} onClick={update} colorScheme=\"teal\">Next bunch</Button>\n            <Button label={\"Start Over\"} onClick={reset}>Start Over</Button>\n        </div >\n    )\n};\n\n// able tab key only on the input that you should complete\n// disable copy/paste\n"]},"metadata":{},"sourceType":"module"}