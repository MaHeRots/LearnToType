{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, forwardRef, useRef } from \"react\";\nimport { Input, Box } from \"@chakra-ui/core\";\nimport { keys, ignoredKeys } from \"../../__mocks__\";\nimport { Button } from \"../../stories/Button\";\n\nconst getRandomKey = () => {\n  return keys[Math.floor(Math.random() * keys.length)];\n};\n\nconst SingleInput = /*#__PURE__*/forwardRef(_c = ({\n  handleChange,\n  keyValue,\n  placeholder\n}, ref) => {\n  return /*#__PURE__*/_jsxDEV(Input, {\n    ref: ref,\n    name: \"\",\n    size: \"lg\",\n    type: \"text\",\n    placeholder: placeholder,\n    w: \"3rem\",\n    value: keyValue,\n    onChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n});\n_c2 = SingleInput;\nlet onKeyPressCount = 0;\nexport const Exercise = () => {\n  _s();\n\n  const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\"]);\n  const [targetsKeyValues, setTargetsKeyValue] = useState([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n  const [error, setError] = useState(0);\n  const [valid, setValid] = useState(0);\n  const focusRef0 = useRef(null);\n  const focusRef1 = useRef(null);\n  const focusRef2 = useRef(null);\n  const focusRef3 = useRef(null);\n  const focusRef4 = useRef(null);\n\n  const handleChange = index => onKeyPress => {\n    if (ignoredKeys.some(key => key === onKeyPress.target.value)) {\n      console.log(\"Nop\");\n    } else {\n      if (onKeyPress.target.value === targetsKeyValues[index]) {\n        setKeyValue(previousArray => {\n          const newArray = [...previousArray];\n          newArray[index] = onKeyPress.target.value;\n          return newArray;\n        });\n        setValid(valid + 1);\n        onKeyPressCount = onKeyPressCount + 1;\n\n        if (index === 0) {\n          focusRef1.current.focus();\n        } else if (index === 1) {\n          focusRef2.current.focus();\n        } else if (index === 2) {\n          focusRef3.current.focus();\n        } else {\n          console.log(\"banana\", focusRef4.current);\n          focusRef4.current.focus();\n        }\n      } else {\n        setError(error + 1);\n        onKeyPressCount = onKeyPressCount + 1;\n      }\n    }\n  };\n\n  const reset = useCallback(() => {\n    setTargetsKeyValue([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Try this first Exercise: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef0,\n      handleChange: handleChange(0),\n      keyValue: keyValues[0],\n      placeholder: targetsKeyValues[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef1,\n      handleChange: handleChange(1),\n      keyValue: keyValues[1],\n      placeholder: targetsKeyValues[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef2,\n      handleChange: handleChange(2),\n      keyValue: keyValues[2],\n      placeholder: targetsKeyValues[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef3,\n      handleChange: handleChange(3),\n      keyValue: keyValues[3],\n      placeholder: targetsKeyValues[3]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error, \" errors | \", onKeyPressCount === 0 ? 0 : valid / onKeyPressCount * 100, \"% | Timer: Hello\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      ref: focusRef4,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        label: \"Go to next exercise\",\n        onClick: reset,\n        children: \"Go to the next exercise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}; //disable tab key\n// go to next exercise focus when it's end\n// reset already filled input too\n\n_s(Exercise, \"+kq+bepaN3um6Y6Ys4EgfWs+Kvw=\");\n\n_c3 = Exercise;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SingleInput$forwardRef\");\n$RefreshReg$(_c2, \"SingleInput\");\n$RefreshReg$(_c3, \"Exercise\");","map":{"version":3,"sources":["/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx"],"names":["React","useCallback","useState","forwardRef","useRef","Input","Box","keys","ignoredKeys","Button","getRandomKey","Math","floor","random","length","SingleInput","handleChange","keyValue","placeholder","ref","onKeyPressCount","Exercise","keyValues","setKeyValue","targetsKeyValues","setTargetsKeyValue","error","setError","valid","setValid","focusRef0","focusRef1","focusRef2","focusRef3","focusRef4","index","onKeyPress","some","key","target","value","console","log","previousArray","newArray","current","focus","reset"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, forwardRef, useRef } from \"react\";\nimport { Input, Box } from \"@chakra-ui/core\";\nimport { keys, ignoredKeys } from \"../../__mocks__\";\nimport { Button } from \"../../stories/Button\";\n\nconst getRandomKey = (): string => { return keys[Math.floor(Math.random() * keys.length)] };\n\nconst SingleInput = forwardRef(({ handleChange, keyValue, placeholder }: { handleChange: any, keyValue: string, placeholder: string }, ref: any) => {\n\n    return (\n        <Input ref={ref} name=\"\" size=\"lg\" type=\"text\" placeholder={placeholder} w=\"3rem\" value={keyValue} onChange={handleChange} />\n    )\n});\n\nlet onKeyPressCount = 0;\nexport const Exercise = () => {\n    const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\"]);\n    const [targetsKeyValues, setTargetsKeyValue] = useState([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n\n    const [error, setError] = useState(0);\n    const [valid, setValid] = useState(0);\n\n    const focusRef0: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef1: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef2: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef3: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef4: React.RefObject<HTMLInputElement> = useRef(null);\n    const handleChange = (index: number) => (onKeyPress: any) => {\n        if (ignoredKeys.some(key => key === onKeyPress.target.value)) {\n            console.log(\"Nop\");\n        } else {\n            if (onKeyPress.target.value === targetsKeyValues[index]) {\n                setKeyValue((previousArray: string[]): string[] => {\n                    const newArray = [...previousArray];\n                    newArray[index] = onKeyPress.target.value;\n                    return newArray;\n                });\n                setValid(valid + 1);\n                onKeyPressCount = onKeyPressCount + 1;\n                if (index === 0) {\n                    focusRef1.current!.focus();\n                } else if (index === 1) {\n                    focusRef2.current!.focus();\n                } else if (index === 2) {\n                    focusRef3.current!.focus();\n                } else {\n                    console.log(\"banana\", focusRef4.current);\n                    focusRef4.current!.focus();\n                }\n            } else {\n                setError(error + 1);\n                onKeyPressCount = onKeyPressCount + 1;\n            }\n        }\n    }\n    const reset = useCallback(() => { setTargetsKeyValue([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]) }, []);\n    return (\n        <div>\n            Try this first Exercise: <br />\n            <SingleInput ref={focusRef0} handleChange={handleChange(0)} keyValue={keyValues[0]} placeholder={targetsKeyValues[0]} />\n            <SingleInput ref={focusRef1} handleChange={handleChange(1)} keyValue={keyValues[1]} placeholder={targetsKeyValues[1]} />\n            <SingleInput ref={focusRef2} handleChange={handleChange(2)} keyValue={keyValues[2]} placeholder={targetsKeyValues[2]} />\n            <SingleInput ref={focusRef3} handleChange={handleChange(3)} keyValue={keyValues[3]} placeholder={targetsKeyValues[3]} />\n            <div>{error} errors | {onKeyPressCount === 0 ? 0 : valid / onKeyPressCount * 100}% | Timer: Hello</div>\n            <Box ref={focusRef4}><Button label={\"Go to next exercise\"} onClick={reset} >Go to the next exercise</Button></Box>\n        </div >\n    )\n};\n\n//disable tab key\n// go to next exercise focus when it's end\n// reset already filled input too"]},"metadata":{},"sourceType":"module"}