{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Input } from \"@chakra-ui/core\";\nimport { randomKey } from \"../../__mocks__\";\n\nconst SingleInput = () => {\n  _s();\n\n  const [value, setValue] = useState([\"\", \"\", \"\", \"\", \"\"]);\n  const [error, setError] = useState(0);\n  const [valid, setValid] = useState(0);\n\n  const handleChange = onKeyPress => {\n    if (onKeyPress.target.value === key) {\n      setValue(onKeyPress.target.value);\n      setValid(valid + 1);\n    } else {\n      setError(error + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Input, {\n    name: \"\",\n    size: \"lg\",\n    type: \"text\",\n    placeholder: key,\n    w: \"3rem\",\n    value: value,\n    onChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SingleInput, \"Tt80oMPZUpZagjDpCqbdveHuo5U=\");\n\n_c = SingleInput;\nconst key = randomKey; // 5 random keys\n\nexport const Exercise = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Try this first Exercise: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [valid, \" valids | \", error, \" errors\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}; // soit 1 seul input reset à chaque fois ou \n// name to input\n// map sur input\n// pas la même valeur pour le placeholder et le value\n// value peut-être pas une variable simple mais un tableau\n// \n\n_c2 = Exercise;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SingleInput\");\n$RefreshReg$(_c2, \"Exercise\");","map":{"version":3,"sources":["/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx"],"names":["React","useState","Input","randomKey","SingleInput","value","setValue","error","setError","valid","setValid","handleChange","onKeyPress","target","key","Exercise"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,SAAT,QAAgC,iBAAhC;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC;;AACA,QAAMU,YAAY,GAAIC,UAAD,IAAqB;AACtC,QAAIA,UAAU,CAACC,MAAX,CAAkBR,KAAlB,KAA4BS,GAAhC,EAAqC;AACjCR,MAAAA,QAAQ,CAACM,UAAU,CAACC,MAAX,CAAkBR,KAAnB,CAAR;AACAK,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH,KAHD,MAGO;AAAED,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AAAqB;AACjC,GALD;;AAOA,sBACI,QAAC,KAAD;AAAO,IAAA,IAAI,EAAC,EAAZ;AAAe,IAAA,IAAI,EAAC,IAApB;AAAyB,IAAA,IAAI,EAAC,MAA9B;AAAqC,IAAA,WAAW,EAAEO,GAAlD;AAAuD,IAAA,CAAC,EAAC,MAAzD;AAAgE,IAAA,KAAK,EAAET,KAAvE;AAA8E,IAAA,QAAQ,EAAEM;AAAxF;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAdD;;GAAMP,W;;KAAAA,W;AAgBN,MAAMU,GAAG,GAAGX,SAAZ,C,CAAuB;;AACvB,OAAO,MAAMY,QAAQ,GAAG,MAAM;AAC1B,sBACI;AAAA,yDAC6B;AAAA;AAAA;AAAA;AAAA,YAD7B,eAEI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAA,iBAAMN,KAAN,gBAAuBF,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAXM,C,CAaP;AACA;AACA;AACA;AACA;AACA;;MAlBaQ,Q","sourcesContent":["import React, { useState } from \"react\";\nimport { Input } from \"@chakra-ui/core\";\nimport { randomKey, keys } from \"../../__mocks__\";\n\nconst SingleInput = () => {\n    const [value, setValue] = useState([\"\", \"\", \"\", \"\", \"\"]);\n    const [error, setError] = useState(0);\n    const [valid, setValid] = useState(0);\n    const handleChange = (onKeyPress: any) => {\n        if (onKeyPress.target.value === key) {\n            setValue(onKeyPress.target.value);\n            setValid(valid + 1)\n        } else { setError(error + 1) }\n    }\n\n    return (\n        <Input name=\"\" size=\"lg\" type=\"text\" placeholder={key} w=\"3rem\" value={value} onChange={handleChange} />\n    )\n}\n\nconst key = randomKey; // 5 random keys\nexport const Exercise = () => {\n    return (\n        <div>\n            Try this first Exercise: <br />\n            <SingleInput />\n            <SingleInput />\n            <SingleInput />\n            <SingleInput />\n            <div>{valid} valids | {error} errors</div>\n        </div>\n    )\n}\n\n// soit 1 seul input reset à chaque fois ou \n// name to input\n// map sur input\n// pas la même valeur pour le placeholder et le value\n// value peut-être pas une variable simple mais un tableau\n// "]},"metadata":{},"sourceType":"module"}