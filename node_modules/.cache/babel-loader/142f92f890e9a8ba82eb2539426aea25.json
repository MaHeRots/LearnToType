{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useEffect, forwardRef, useRef } from \"react\";\nimport { Input, Button } from \"@chakra-ui/core\";\nimport { keys, ignoredKeys } from \"../../__mocks__\";\n\nconst getRandomKey = () => {\n  return keys[Math.floor(Math.random() * keys.length)];\n};\n\nconst SingleInput = /*#__PURE__*/forwardRef(_c = ({\n  handleChange,\n  keyValue,\n  placeholder\n}, ref) => {\n  return /*#__PURE__*/_jsxDEV(Input, {\n    ref: ref,\n    name: \"\",\n    size: \"lg\",\n    type: \"text\",\n    placeholder: placeholder,\n    w: \"3rem\",\n    value: keyValue,\n    onChange: handleChange,\n    \"aria-label\": placeholder\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n});\n_c2 = SingleInput;\nlet onKeyPressCount = 0;\nexport const Exercise = () => {\n  _s();\n\n  const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\"]);\n  const [timer, setTimer] = useState({\n    time: 0,\n    started: false,\n    display: \"0h 0m 0s\",\n    startedDate: Date.now()\n  });\n  const [targetsKeyValues, setTargetsKeyValue] = useState([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n  const [error, setError] = useState(0);\n  const [valid, setValid] = useState(0);\n  let TimeOut;\n  useEffect(() => {\n    if (timer.started === true) {\n      const hours = Math.floor(timer.time / 100 / 60);\n      const minutes = Math.floor(timer.time / 100 - hours * 60);\n      const seconds = Math.floor(timer.time - hours * 100 - minutes * 6000);\n      const TimeOut = setTimeout(() => setTimer({\n        time: timer.time + 1,\n        started: true,\n        display: `${hours}h ${minutes}m ${seconds}s`,\n        startedDate: timer.startedDate\n      }), 1000);\n      return TimeOut;\n    } else if (timer.started === false) {\n      clearTimeout(TimeOut);\n    }\n  }, [timer, TimeOut]);\n\n  const start = () => {\n    if (timer.started === false) {\n      setTimer({\n        time: timer.time,\n        started: true,\n        display: timer.display,\n        startedDate: Date.now()\n      });\n    }\n  };\n\n  const stop = () => {\n    if (timer.started === true) {\n      setTimer({\n        time: timer.time,\n        started: false,\n        display: timer.display,\n        startedDate: Date.now()\n      });\n    }\n  };\n\n  const reset = () => {\n    stop();\n    setTimer({\n      time: 0,\n      started: false,\n      display: \"0h 0m 0s\",\n      startedDate: Date.now()\n    });\n  };\n\n  const focusRef0 = useRef(null);\n  const focusRef1 = useRef(null);\n  const focusRef2 = useRef(null);\n  const focusRef3 = useRef(null);\n  const focusRef4 = useRef(null);\n\n  const handleChange = index => onKeyPress => {\n    if (ignoredKeys.some(key => key === onKeyPress.target.value)) {\n      console.log(\"Sorry, sorry, sorry, sorry, 내가 내가 내가 먼저...\");\n    } else {\n      if (onKeyPress.target.value === targetsKeyValues[index]) {\n        setKeyValue(previousArray => {\n          const newArray = [...previousArray];\n          newArray[index] = onKeyPress.target.value;\n          return newArray;\n        });\n        setValid(valid + 1);\n        onKeyPressCount = onKeyPressCount + 1;\n\n        if (index === 0) {\n          start();\n          focusRef1.current.focus();\n        } else if (index === 1) {\n          focusRef2.current.focus();\n        } else if (index === 2) {\n          focusRef3.current.focus();\n        } else {\n          focusRef4.current.focus();\n          stop();\n        }\n      } else {\n        setError(error + 1);\n        onKeyPressCount = onKeyPressCount + 1;\n      }\n    }\n  };\n\n  const update = useCallback(() => {\n    setTargetsKeyValue([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n    setKeyValue([\"\", \"\", \"\", \"\"]);\n    focusRef0.current.focus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Click on the first input to start the game! \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 57\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef0,\n      handleChange: handleChange(0),\n      keyValue: keyValues[0],\n      placeholder: targetsKeyValues[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef1,\n      handleChange: handleChange(1),\n      keyValue: keyValues[1],\n      placeholder: targetsKeyValues[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef2,\n      handleChange: handleChange(2),\n      keyValue: keyValues[2],\n      placeholder: targetsKeyValues[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef3,\n      handleChange: handleChange(3),\n      keyValue: keyValues[3],\n      placeholder: targetsKeyValues[3]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error, \" errors | \", onKeyPressCount === 0 ? 0 : valid / onKeyPressCount * 100, \"% | \", timer.display]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      ref: focusRef4,\n      label: \"Go to next exercise\",\n      onClick: update,\n      colorScheme: \"teal\",\n      children: \"Next bunch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: \"Start Over\",\n      onClick: reset,\n      children: \"Start Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}; // able tab key only on the input that you should complete\n// disable copy/paste\n//fix stop & reset timeout\n\n_s(Exercise, \"aHGd2aaNdV1ZXlIpZEDfxCuC39U=\");\n\n_c3 = Exercise;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SingleInput$forwardRef\");\n$RefreshReg$(_c2, \"SingleInput\");\n$RefreshReg$(_c3, \"Exercise\");","map":{"version":3,"sources":["/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx"],"names":["React","useCallback","useState","useEffect","forwardRef","useRef","Input","Button","keys","ignoredKeys","getRandomKey","Math","floor","random","length","SingleInput","handleChange","keyValue","placeholder","ref","onKeyPressCount","Exercise","keyValues","setKeyValue","timer","setTimer","time","started","display","startedDate","Date","now","targetsKeyValues","setTargetsKeyValue","error","setError","valid","setValid","TimeOut","hours","minutes","seconds","setTimeout","clearTimeout","start","stop","reset","focusRef0","focusRef1","focusRef2","focusRef3","focusRef4","index","onKeyPress","some","key","target","value","console","log","previousArray","newArray","current","focus","update"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, forwardRef, useRef } from \"react\";\nimport { Input, Button } from \"@chakra-ui/core\";\nimport { keys, ignoredKeys } from \"../../__mocks__\";\n\nconst getRandomKey = (): string => { return keys[Math.floor(Math.random() * keys.length)] };\n\nconst SingleInput = forwardRef(({ handleChange, keyValue, placeholder }: { handleChange: any, keyValue: string, placeholder: string }, ref: any) => {\n\n    return (\n        <Input ref={ref} name=\"\" size=\"lg\" type=\"text\" placeholder={placeholder} w=\"3rem\" value={keyValue} onChange={handleChange} aria-label={placeholder} />\n    )\n});\n\nlet onKeyPressCount = 0;\n\nexport const Exercise = () => {\n    const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\"]);\n    const [timer, setTimer] = useState({ time: 0, started: false, display: \"0h 0m 0s\", startedDate: Date.now() });\n    const [targetsKeyValues, setTargetsKeyValue] = useState([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n    const [error, setError] = useState(0);\n    const [valid, setValid] = useState(0);\n\n    let TimeOut: any;\n    useEffect((): any => {\n        if (timer.started === true) {\n            const hours = Math.floor((timer.time / 100) / 60);\n            const minutes = Math.floor((timer.time / 100) - (hours * 60));\n            const seconds = Math.floor(timer.time - (hours * 100) - (minutes * 6000));\n            const TimeOut = setTimeout(() => setTimer({ time: timer.time + 1, started: true, display: `${hours}h ${minutes}m ${seconds}s`, startedDate: timer.startedDate }), 1000);\n            return (TimeOut)\n        } else if (timer.started === false) {\n            clearTimeout(TimeOut);\n        }\n    }, [timer, TimeOut]);\n\n    const start = () => {\n        if (timer.started === false) {\n            setTimer({ time: timer.time, started: true, display: timer.display, startedDate: Date.now() });\n        }\n    }\n\n    const stop = () => {\n        if (timer.started === true) {\n            setTimer({ time: timer.time, started: false, display: timer.display, startedDate: Date.now() });\n        }\n    };\n\n    const reset = () => {\n        stop()\n        setTimer({ time: 0, started: false, display: \"0h 0m 0s\", startedDate: Date.now() });\n    }\n\n    const focusRef0: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef1: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef2: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef3: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef4: React.RefObject<HTMLInputElement> = useRef(null);\n\n    const handleChange = (index: number) => (onKeyPress: any) => {\n        if (ignoredKeys.some(key => key === onKeyPress.target.value)) {\n            console.log(\"Sorry, sorry, sorry, sorry, 내가 내가 내가 먼저...\");\n        } else {\n            if (onKeyPress.target.value === targetsKeyValues[index]) {\n                setKeyValue((previousArray: string[]): string[] => {\n                    const newArray = [...previousArray];\n                    newArray[index] = onKeyPress.target.value;\n                    return newArray;\n                });\n                setValid(valid + 1);\n                onKeyPressCount = onKeyPressCount + 1;\n                if (index === 0) {\n                    start();\n                    focusRef1.current!.focus();\n                } else if (index === 1) {\n                    focusRef2.current!.focus();\n                } else if (index === 2) {\n                    focusRef3.current!.focus();\n                } else {\n                    focusRef4.current!.focus();\n                    stop();\n                }\n            } else {\n                setError(error + 1);\n                onKeyPressCount = onKeyPressCount + 1;\n            }\n        }\n    };\n\n    const update = useCallback(() => {\n        setTargetsKeyValue([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n        setKeyValue([\"\", \"\", \"\", \"\"]);\n        focusRef0.current!.focus();\n    }, []);\n\n    return (\n        <div>\n            Click on the first input to start the game! <br />\n            <SingleInput ref={focusRef0} handleChange={handleChange(0)} keyValue={keyValues[0]} placeholder={targetsKeyValues[0]} />\n            <SingleInput ref={focusRef1} handleChange={handleChange(1)} keyValue={keyValues[1]} placeholder={targetsKeyValues[1]} />\n            <SingleInput ref={focusRef2} handleChange={handleChange(2)} keyValue={keyValues[2]} placeholder={targetsKeyValues[2]} />\n            <SingleInput ref={focusRef3} handleChange={handleChange(3)} keyValue={keyValues[3]} placeholder={targetsKeyValues[3]} />\n            <div>{error} errors | {onKeyPressCount === 0 ? 0 : valid / onKeyPressCount * 100}% | {timer.display}</div>\n            {/* @ts-ignore */}\n            <Button ref={focusRef4} label={\"Go to next exercise\"} onClick={update} colorScheme=\"teal\">Next bunch</Button>\n            <Button label={\"Start Over\"} onClick={reset}>Start Over</Button>\n        </div >\n    )\n};\n\n// able tab key only on the input that you should complete\n// disable copy/paste\n//fix stop & reset timeout\n"]},"metadata":{},"sourceType":"module"}