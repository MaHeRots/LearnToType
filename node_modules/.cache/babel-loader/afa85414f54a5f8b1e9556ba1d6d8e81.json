{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Input } from \"@chakra-ui/core\";\nimport { randomKey } from \"../../__mocks__\";\nconst key = randomKey; // 5 random keys\n\nconst SingleInput = ({\n  handleChange,\n  keyValue\n}) => {\n  // const [value, setValue] = useState([\"\", \"\", \"\", \"\", \"\"]);\n  return /*#__PURE__*/_jsxDEV(Input, {\n    name: \"\",\n    size: \"lg\",\n    type: \"text\",\n    placeholder: key,\n    w: \"3rem\",\n    value: keyValue,\n    onChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n\n_c = SingleInput;\nexport const Exercise = () => {\n  _s();\n\n  const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\", \"\"]);\n  const [error, setError] = useState(0);\n  const [valid, setValid] = useState(0);\n\n  const handleChange = index => onKeyPress => {\n    if (onKeyPress.target.value === key) {\n      setKeyValue(previousArray => {\n        const newArray = [...previousArray];\n        newArray[index] = onKeyPress.target.value;\n      });\n      setValid(valid + 1);\n    } else {\n      setError(error + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Try this first Exercise: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      handleChange: handleChange,\n      keyValue: keyValues[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      handleChange: handleChange,\n      keyValue: keyValues[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      handleChange: handleChange,\n      keyValue: keyValues[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      handleChange: handleChange,\n      keyValue: keyValues[3]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [valid, \" valids | \", error, \" errors\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}; // soit 1 seul input reset à chaque fois ou \n// name to input\n// map sur input\n// pas la même valeur pour le placeholder et le value\n// value peut-être pas une variable simple mais un tableau\n// \n\n_s(Exercise, \"Wcf0SHnmkCAKl4MAq1Gb7ew1kYM=\");\n\n_c2 = Exercise;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SingleInput\");\n$RefreshReg$(_c2, \"Exercise\");","map":{"version":3,"sources":["/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx"],"names":["React","useState","Input","randomKey","key","SingleInput","handleChange","keyValue","Exercise","keyValues","setKeyValue","error","setError","valid","setValid","index","onKeyPress","target","value","previousArray","newArray"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,SAAT,QAAgC,iBAAhC;AAEA,MAAMC,GAAG,GAAGD,SAAZ,C,CAAuB;;AAEvB,MAAME,WAAW,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAyE;AACzF;AAEA,sBACI,QAAC,KAAD;AAAO,IAAA,IAAI,EAAC,EAAZ;AAAe,IAAA,IAAI,EAAC,IAApB;AAAyB,IAAA,IAAI,EAAC,MAA9B;AAAqC,IAAA,WAAW,EAAEH,GAAlD;AAAuD,IAAA,CAAC,EAAC,MAAzD;AAAgE,IAAA,KAAK,EAAEG,QAAvE;AAAiF,IAAA,QAAQ,EAAED;AAA3F;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAND;;KAAMD,W;AAQN,OAAO,MAAMG,QAAQ,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2BT,QAAQ,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAD,CAAzC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,CAAD,CAAlC;;AACA,QAAMK,YAAY,GAAIS,KAAD,IAAoBC,UAAD,IAAqB;AACzD,QAAIA,UAAU,CAACC,MAAX,CAAkBC,KAAlB,KAA4Bd,GAAhC,EAAqC;AACjCM,MAAAA,WAAW,CAAES,aAAD,IAA6B;AACrC,cAAMC,QAAQ,GAAG,CAAC,GAAGD,aAAJ,CAAjB;AACAC,QAAAA,QAAQ,CAACL,KAAD,CAAR,GAAkBC,UAAU,CAACC,MAAX,CAAkBC,KAApC;AACH,OAHU,CAAX;AAIAJ,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH,KAND,MAMO;AAAED,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AAAqB;AACjC,GARD;;AASA,sBACI;AAAA,yDAC6B;AAAA;AAAA;AAAA;AAAA,YAD7B,eAEI,QAAC,WAAD;AAAa,MAAA,YAAY,EAAEL,YAA3B;AAAyC,MAAA,QAAQ,EAAEG,SAAS,CAAC,CAAD;AAA5D;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,WAAD;AAAa,MAAA,YAAY,EAAEH,YAA3B;AAAyC,MAAA,QAAQ,EAAEG,SAAS,CAAC,CAAD;AAA5D;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,WAAD;AAAa,MAAA,YAAY,EAAEH,YAA3B;AAAyC,MAAA,QAAQ,EAAEG,SAAS,CAAC,CAAD;AAA5D;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI,QAAC,WAAD;AAAa,MAAA,YAAY,EAAEH,YAA3B;AAAyC,MAAA,QAAQ,EAAEG,SAAS,CAAC,CAAD;AAA5D;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAA,iBAAMI,KAAN,gBAAuBF,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAvBM,C,CAyBP;AACA;AACA;AACA;AACA;AACA;;GA9BaH,Q;;MAAAA,Q","sourcesContent":["import React, { useState } from \"react\";\nimport { Input } from \"@chakra-ui/core\";\nimport { randomKey, keys } from \"../../__mocks__\";\n\nconst key = randomKey; // 5 random keys\n\nconst SingleInput = ({ handleChange, keyValue }: { handleChange: any, keyValue: string }) => {\n    // const [value, setValue] = useState([\"\", \"\", \"\", \"\", \"\"]);\n\n    return (\n        <Input name=\"\" size=\"lg\" type=\"text\" placeholder={key} w=\"3rem\" value={keyValue} onChange={handleChange} />\n    )\n}\n\nexport const Exercise = () => {\n    const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\", \"\"]);\n    const [error, setError] = useState(0);\n    const [valid, setValid] = useState(0);\n    const handleChange = (index: number) => (onKeyPress: any) => {\n        if (onKeyPress.target.value === key) {\n            setKeyValue((previousArray: string[]) => {\n                const newArray = [...previousArray];\n                newArray[index] = onKeyPress.target.value;\n            });\n            setValid(valid + 1)\n        } else { setError(error + 1) }\n    }\n    return (\n        <div>\n            Try this first Exercise: <br />\n            <SingleInput handleChange={handleChange} keyValue={keyValues[0]} />\n            <SingleInput handleChange={handleChange} keyValue={keyValues[1]} />\n            <SingleInput handleChange={handleChange} keyValue={keyValues[2]} />\n            <SingleInput handleChange={handleChange} keyValue={keyValues[3]} />\n            <div>{valid} valids | {error} errors</div>\n        </div>\n    )\n}\n\n// soit 1 seul input reset à chaque fois ou \n// name to input\n// map sur input\n// pas la même valeur pour le placeholder et le value\n// value peut-être pas une variable simple mais un tableau\n// "]},"metadata":{},"sourceType":"module"}