{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Input } from \"@chakra-ui/core\";\nimport { randomKey } from \"../../__mocks__\";\nlet letter = randomKey;\nexport const Exercise = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [error, setError] = useState(0);\n  const [valid, setValid] = useState(0);\n\n  const handleChange = onKeyPress => {\n    if (onKeyPress.target.value === letter) {\n      setValue(onKeyPress.target.value);\n      setValid(valid + 1);\n    } else {\n      setError(error + 1);\n    }\n  };\n\n  const Inputs = () => {\n    for (let i = 0; i < 9; i++) {\n      let letter = randomKey;\n      return /*#__PURE__*/_jsxDEV(Input, {\n        size: \"lg\",\n        type: \"text\",\n        placeholder: letter,\n        w: \"3rem\",\n        value: value,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Try this first Exercise: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(Inputs, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [valid, \" valids | \", error, \" errors\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Exercise, \"S0vjEblv85UdOhvvPXlrUAGDTjU=\");\n\n_c = Exercise;\n\nvar _c;\n\n$RefreshReg$(_c, \"Exercise\");","map":{"version":3,"sources":["/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx"],"names":["React","useState","Input","randomKey","letter","Exercise","value","setValue","error","setError","valid","setValid","handleChange","onKeyPress","target","Inputs","i"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAGA,IAAIC,MAAM,GAAGD,SAAb;AACA,OAAO,MAAME,QAAQ,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;;AACA,QAAMW,YAAY,GAAIC,UAAD,IAAqB;AACtC,QAAIA,UAAU,CAACC,MAAX,CAAkBR,KAAlB,KAA4BF,MAAhC,EAAwC;AACpCG,MAAAA,QAAQ,CAACM,UAAU,CAACC,MAAX,CAAkBR,KAAnB,CAAR;AACAK,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH,KAHD,MAGO;AAAED,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AAAqB;AACjC,GALD;;AAOA,QAAMO,MAAM,GAAG,MAAM;AACjB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,UAAIZ,MAAM,GAAGD,SAAb;AACA,0BAAQ,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,IAAZ;AAAiB,QAAA,IAAI,EAAC,MAAtB;AAA6B,QAAA,WAAW,EAAEC,MAA1C;AAAkD,QAAA,CAAC,EAAC,MAApD;AAA2D,QAAA,KAAK,EAAEE,KAAlE;AAAyE,QAAA,QAAQ,EAAEM;AAAnF;AAAA;AAAA;AAAA;AAAA,cAAR;AAEH;AACJ,GAND;;AAOA,sBACI;AAAA,yDAC6B;AAAA;AAAA;AAAA;AAAA,YAD7B,eAEI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,iBAAMF,KAAN,gBAAuBF,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAzBM;;GAAMH,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from \"react\";\nimport { Input } from \"@chakra-ui/core\";\nimport { randomKey } from \"../../__mocks__\";\n\n\nlet letter = randomKey;\nexport const Exercise = () => {\n    const [value, setValue] = useState(\"\");\n    const [error, setError] = useState(0);\n    const [valid, setValid] = useState(0);\n    const handleChange = (onKeyPress: any) => {\n        if (onKeyPress.target.value === letter) {\n            setValue(onKeyPress.target.value);\n            setValid(valid + 1)\n        } else { setError(error + 1) }\n    }\n\n    const Inputs = () => {\n        for (let i = 0; i < 9; i++) {\n            let letter = randomKey;\n            return (<Input size=\"lg\" type=\"text\" placeholder={letter} w=\"3rem\" value={value} onChange={handleChange} />\n            )\n        }\n    }\n    return (\n        <div>\n            Try this first Exercise: <br />\n            <Inputs />\n            <div>{valid} valids | {error} errors</div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}