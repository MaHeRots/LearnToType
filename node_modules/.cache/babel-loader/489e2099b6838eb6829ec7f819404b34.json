{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marie-helenerots/Documents/Git/fysp/src/components/theme/index.tsx\";\nimport React from \"react\";\nimport { CSSReset, ChakraProvider as ChakraUiThemeProvider } from \"@chakra-ui/core\";\nimport theme from \"@chakra-ui/theme\";\nimport emotionStyled from \"@emotion/styled\";\nexport const styled = emotionStyled;\nconst fonts = { ...theme.fonts,\n  heading: \"'Poppins', sans-serif\",\n  body: \"'Source Sans Pro', sans-serif\",\n  mono: \"Menlo, monospace\"\n};\nconst colors = { ...theme.colors,\n  semantic: {\n    valid: \"#0DB518\",\n    error: \"#E42929\",\n    warning: \"#EFAB22\",\n    info: \"#0085FF\"\n  }\n};\nexport const customTheme = { ...theme,\n  fonts,\n  colors\n};\nexport const ThemeProvider = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(ChakraUiThemeProvider, {\n  theme: customTheme,\n  children: [/*#__PURE__*/_jsxDEV(CSSReset, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this), children]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 44,\n  columnNumber: 5\n}, this);\n_c = ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/Users/marie-helenerots/Documents/Git/fysp/src/components/theme/index.tsx"],"names":["React","CSSReset","ChakraProvider","ChakraUiThemeProvider","theme","emotionStyled","styled","fonts","heading","body","mono","colors","semantic","valid","error","warning","info","customTheme","ThemeProvider","children"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,EAEEC,cAAc,IAAIC,qBAFpB,QAGO,iBAHP;AAIA,OAAOC,KAAP,MAA6B,kBAA7B;AACA,OAAOC,aAAP,MAA4C,iBAA5C;AAEA,OAAO,MAAMC,MAAM,GAAGD,aAAf;AAEP,MAAME,KAAK,GAAG,EACZ,GAAGH,KAAK,CAACG,KADG;AAEZC,EAAAA,OAAO,EAAE,uBAFG;AAGZC,EAAAA,IAAI,EAAE,+BAHM;AAIZC,EAAAA,IAAI,EAAE;AAJM,CAAd;AAOA,MAAMC,MAAM,GAAG,EACb,GAAGP,KAAK,CAACO,MADI;AAEbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,SADC;AAERC,IAAAA,KAAK,EAAE,SAFC;AAGRC,IAAAA,OAAO,EAAE,SAHD;AAIRC,IAAAA,IAAI,EAAE;AAJE;AAFG,CAAf;AAeA,OAAO,MAAMC,WAAwB,GAAG,EACtC,GAAGb,KADmC;AAEtCG,EAAAA,KAFsC;AAGtCI,EAAAA;AAHsC,CAAjC;AAMP,OAAO,MAAMO,aAAa,GAAG,CAAC;AAC5BC,EAAAA;AAD4B,CAAD,kBAKzB,QAAC,qBAAD;AAAuB,EAAA,KAAK,EAAEF,WAA9B;AAAA,0BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UADF,EAEGE,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA,QALG;KAAMD,a","sourcesContent":["import React from \"react\";\nimport {\n  CSSReset,\n  ChakraProvider as ChakraUiThemeProvider\n} from \"@chakra-ui/core\";\nimport theme, { Theme } from \"@chakra-ui/theme\";\nimport emotionStyled, { CreateStyled } from \"@emotion/styled\";\n\nexport const styled = emotionStyled as CreateStyled<Theme>;\n\nconst fonts = {\n  ...theme.fonts,\n  heading: \"'Poppins', sans-serif\",\n  body: \"'Source Sans Pro', sans-serif\",\n  mono: \"Menlo, monospace\"\n};\n\nconst colors = {\n  ...theme.colors,\n  semantic: {\n    valid: \"#0DB518\",\n    error: \"#E42929\",\n    warning: \"#EFAB22\",\n    info: \"#0085FF\"\n  }\n};\n\ntype CustomTheme = Theme & {\n  fonts: typeof fonts;\n  colors: typeof colors;\n};\n\nexport const customTheme: CustomTheme = {\n  ...theme,\n  fonts,\n  colors\n};\n\nexport const ThemeProvider = ({\n  children\n}: {\n  children: JSX.Element;\n}): JSX.Element => (\n    <ChakraUiThemeProvider theme={customTheme}>\n      <CSSReset />\n      {children}\n    </ChakraUiThemeProvider>\n  );\n"]},"metadata":{},"sourceType":"module"}