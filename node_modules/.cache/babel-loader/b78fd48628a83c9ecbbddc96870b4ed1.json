{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useEffect, forwardRef, useRef } from \"react\";\nimport { Input, Button } from \"@chakra-ui/core\";\nimport { keys, ignoredKeys } from \"../../__mocks__\";\n\nconst getRandomKey = () => {\n  return keys[Math.floor(Math.random() * keys.length)];\n};\n\nconst SingleInput = /*#__PURE__*/forwardRef(_c = ({\n  handleChange,\n  keyValue,\n  placeholder\n}, ref) => {\n  return /*#__PURE__*/_jsxDEV(Input, {\n    ref: ref,\n    name: \"\",\n    size: \"lg\",\n    type: \"text\",\n    placeholder: placeholder,\n    w: \"3rem\",\n    value: keyValue,\n    onChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n});\n_c2 = SingleInput;\nlet onKeyPressCount = 0; // function runTimer(timer: number[]) {\n//     timer[3]++;\n//     timer[0] = Math.floor((timer[3] / 100) / 60);\n//     timer[1] = Math.floor((timer[3] / 100) - (timer[0] * 60));\n//     timer[2] = Math.floor(timer[3] - (timer[1] * 100) - (timer[0] * 6000));\n//     // console.log(`${timer[0]}h ${timer[1]}m ${timer[2]}s`);\n//     // return `${timer[0]}h ${timer[1]}m ${timer[2]}s`;\n// }\n\nexport const Exercise = () => {\n  _s();\n\n  const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\"]);\n  const [timer, setTimer] = useState({\n    time: 0,\n    started: false,\n    display: \"0h 0m 0s\",\n    startedDate: Date.now()\n  });\n  const [timerDisplay, setTimerDisplay] = useState(\"0h 0m 0s\");\n  const [targetsKeyValues, setTargetsKeyValue] = useState([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n  const [started, setStarted] = useState(false);\n  useEffect(() => {\n    if (started === false) {\n      //const hours = Math.floor((timer / 100) / 60);\n      //     const minutes = Math.floor((timer / 100) - (hours * 60));\n      //     const seconds = Math.floor(timer - (hours * 100) - (minutes * 6000));\n      setInterval(() => setTimer({\n        time: timer.time + 1,\n        started: false,\n        display: \"0h 0m 0s\",\n        startedDate: Date.now()\n      }), 1000);\n      setStarted(true);\n      console.log(\"start the timer\");\n    }\n  }, [started, timer]);\n  const [error, setError] = useState(0);\n  const [valid, setValid] = useState(0);\n  const focusRef0 = useRef(null);\n  const focusRef1 = useRef(null);\n  const focusRef2 = useRef(null);\n  const focusRef3 = useRef(null);\n  const focusRef4 = useRef(null); // const runTimer = () => {\n  //     setTimer(timer + 1);\n  //     console.log(timer, timerDisplay);\n  //     const hours = Math.floor((timer / 100) / 60);\n  //     const minutes = Math.floor((timer / 100) - (hours * 60));\n  //     const seconds = Math.floor(timer - (hours * 100) - (minutes * 6000));\n  //     setTimerDisplay(`${hours}h ${minutes}m ${seconds}s`);\n  // }\n  // const start = () => {\n  //     //si started == true je lance cette fonction\n  //     console.log(\"start the timer\");\n  //     // setInterval(() => setTimer(timer + 1), 1000);\n  //     //stocker la date à laquelle je commence\n  // };\n\n  const stop = () => {\n    clearInterval();\n    console.log(\"stop the timer\");\n  };\n\n  const reset = () => {\n    clearInterval();\n    setTimer({\n      time: 0,\n      started: false,\n      display: \"0h 0m 0s\",\n      startedDate: Date.now()\n    });\n    console.log(\"reset the game\");\n  };\n\n  const handleChange = index => onKeyPress => {\n    if (ignoredKeys.some(key => key === onKeyPress.target.value)) {\n      console.log(\"Sorry, sorry, sorry, sorry, 내가 내가 내가 먼저...\");\n    } else {\n      if (onKeyPress.target.value === targetsKeyValues[index]) {\n        setKeyValue(previousArray => {\n          const newArray = [...previousArray];\n          newArray[index] = onKeyPress.target.value;\n          return newArray;\n        });\n        setValid(valid + 1);\n        onKeyPressCount = onKeyPressCount + 1;\n\n        if (index === 0) {\n          focusRef1.current.focus();\n        } else if (index === 1) {\n          focusRef2.current.focus();\n        } else if (index === 2) {\n          focusRef3.current.focus();\n        } else {\n          focusRef4.current.focus();\n          stop();\n        }\n      } else {\n        setError(error + 1);\n        onKeyPressCount = onKeyPressCount + 1;\n      }\n    }\n  };\n\n  const update = useCallback(() => {\n    setTargetsKeyValue([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n    setKeyValue([\"\", \"\", \"\", \"\"]);\n    focusRef0.current.focus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Click on the first input to start the game! \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 57\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef0,\n      handleChange: handleChange(0),\n      keyValue: keyValues[0],\n      placeholder: targetsKeyValues[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef1,\n      handleChange: handleChange(1),\n      keyValue: keyValues[1],\n      placeholder: targetsKeyValues[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef2,\n      handleChange: handleChange(2),\n      keyValue: keyValues[2],\n      placeholder: targetsKeyValues[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SingleInput, {\n      ref: focusRef3,\n      handleChange: handleChange(3),\n      keyValue: keyValues[3],\n      placeholder: targetsKeyValues[3]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error, \" errors | \", onKeyPressCount === 0 ? 0 : valid / onKeyPressCount * 100, \"% | \", timer.time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      ref: focusRef4,\n      label: \"Go to next exercise\",\n      onClick: update,\n      colorScheme: \"teal\",\n      children: \"Next bunch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: \"Start Over\",\n      onClick: reset,\n      children: \"Start Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}; // able tab key only on the input that you should complete\n// disable copy/paste\n\n_s(Exercise, \"g8ezoEgCZpS+y+jZgDJyU4zzOpI=\");\n\n_c3 = Exercise;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SingleInput$forwardRef\");\n$RefreshReg$(_c2, \"SingleInput\");\n$RefreshReg$(_c3, \"Exercise\");","map":{"version":3,"sources":["/Users/marie-helenerots/Documents/Git/fysp/src/components/pages/exercise.tsx"],"names":["React","useCallback","useState","useEffect","forwardRef","useRef","Input","Button","keys","ignoredKeys","getRandomKey","Math","floor","random","length","SingleInput","handleChange","keyValue","placeholder","ref","onKeyPressCount","Exercise","keyValues","setKeyValue","timer","setTimer","time","started","display","startedDate","Date","now","timerDisplay","setTimerDisplay","targetsKeyValues","setTargetsKeyValue","setStarted","setInterval","console","log","error","setError","valid","setValid","focusRef0","focusRef1","focusRef2","focusRef3","focusRef4","stop","clearInterval","reset","index","onKeyPress","some","key","target","value","previousArray","newArray","current","focus","update"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, forwardRef, useRef } from \"react\";\nimport { Input, Button } from \"@chakra-ui/core\";\nimport { keys, ignoredKeys } from \"../../__mocks__\";\n\nconst getRandomKey = (): string => { return keys[Math.floor(Math.random() * keys.length)] };\n\nconst SingleInput = forwardRef(({ handleChange, keyValue, placeholder }: { handleChange: any, keyValue: string, placeholder: string }, ref: any) => {\n\n    return (\n        <Input ref={ref} name=\"\" size=\"lg\" type=\"text\" placeholder={placeholder} w=\"3rem\" value={keyValue} onChange={handleChange} />\n    )\n});\n\nlet onKeyPressCount = 0;\n\n// function runTimer(timer: number[]) {\n//     timer[3]++;\n//     timer[0] = Math.floor((timer[3] / 100) / 60);\n//     timer[1] = Math.floor((timer[3] / 100) - (timer[0] * 60));\n//     timer[2] = Math.floor(timer[3] - (timer[1] * 100) - (timer[0] * 6000));\n//     // console.log(`${timer[0]}h ${timer[1]}m ${timer[2]}s`);\n//     // return `${timer[0]}h ${timer[1]}m ${timer[2]}s`;\n// }\n\n\nexport const Exercise = () => {\n    const [keyValues, setKeyValue] = useState([\"\", \"\", \"\", \"\"]);\n    const [timer, setTimer] = useState({ time: 0, started: false, display: \"0h 0m 0s\", startedDate: Date.now() });\n    const [timerDisplay, setTimerDisplay] = useState(\"0h 0m 0s\");\n    const [targetsKeyValues, setTargetsKeyValue] = useState([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n    const [started, setStarted] = useState(false);\n\n    useEffect(() => {\n        if (started === false) {\n            //const hours = Math.floor((timer / 100) / 60);\n            //     const minutes = Math.floor((timer / 100) - (hours * 60));\n            //     const seconds = Math.floor(timer - (hours * 100) - (minutes * 6000));\n            setInterval(() => setTimer({ time: timer.time + 1, started: false, display: \"0h 0m 0s\", startedDate: Date.now() }), 1000);\n            setStarted(true);\n            console.log(\"start the timer\");\n        }\n    }, [started, timer]);\n\n    const [error, setError] = useState(0);\n    const [valid, setValid] = useState(0);\n\n    const focusRef0: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef1: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef2: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef3: React.RefObject<HTMLInputElement> = useRef(null);\n    const focusRef4: React.RefObject<HTMLInputElement> = useRef(null);\n\n    // const runTimer = () => {\n    //     setTimer(timer + 1);\n    //     console.log(timer, timerDisplay);\n    //     const hours = Math.floor((timer / 100) / 60);\n    //     const minutes = Math.floor((timer / 100) - (hours * 60));\n    //     const seconds = Math.floor(timer - (hours * 100) - (minutes * 6000));\n    //     setTimerDisplay(`${hours}h ${minutes}m ${seconds}s`);\n    // }\n    // const start = () => {\n    //     //si started == true je lance cette fonction\n    //     console.log(\"start the timer\");\n    //     // setInterval(() => setTimer(timer + 1), 1000);\n    //     //stocker la date à laquelle je commence\n    // };\n\n    const stop = () => {\n        clearInterval();\n        console.log(\"stop the timer\");\n    };\n\n    const reset = () => {\n        clearInterval();\n        setTimer({ time: 0, started: false, display: \"0h 0m 0s\", startedDate: Date.now() });\n        console.log(\"reset the game\")\n    }\n\n    const handleChange = (index: number) => (onKeyPress: any) => {\n        if (ignoredKeys.some(key => key === onKeyPress.target.value)) {\n            console.log(\"Sorry, sorry, sorry, sorry, 내가 내가 내가 먼저...\");\n        } else {\n            if (onKeyPress.target.value === targetsKeyValues[index]) {\n                setKeyValue((previousArray: string[]): string[] => {\n                    const newArray = [...previousArray];\n                    newArray[index] = onKeyPress.target.value;\n                    return newArray;\n                });\n                setValid(valid + 1);\n                onKeyPressCount = onKeyPressCount + 1;\n                if (index === 0) {\n                    focusRef1.current!.focus();\n                } else if (index === 1) {\n                    focusRef2.current!.focus();\n                } else if (index === 2) {\n                    focusRef3.current!.focus();\n                } else {\n                    focusRef4.current!.focus();\n                    stop();\n                }\n            } else {\n                setError(error + 1);\n                onKeyPressCount = onKeyPressCount + 1;\n            }\n        }\n    };\n\n    const update = useCallback(() => {\n        setTargetsKeyValue([getRandomKey(), getRandomKey(), getRandomKey(), getRandomKey()]);\n        setKeyValue([\"\", \"\", \"\", \"\"]);\n        focusRef0.current!.focus();\n    }, []);\n\n    return (\n        <div>\n            Click on the first input to start the game! <br />\n            <SingleInput ref={focusRef0} handleChange={handleChange(0)} keyValue={keyValues[0]} placeholder={targetsKeyValues[0]} />\n            <SingleInput ref={focusRef1} handleChange={handleChange(1)} keyValue={keyValues[1]} placeholder={targetsKeyValues[1]} />\n            <SingleInput ref={focusRef2} handleChange={handleChange(2)} keyValue={keyValues[2]} placeholder={targetsKeyValues[2]} />\n            <SingleInput ref={focusRef3} handleChange={handleChange(3)} keyValue={keyValues[3]} placeholder={targetsKeyValues[3]} />\n            <div>{error} errors | {onKeyPressCount === 0 ? 0 : valid / onKeyPressCount * 100}% | {timer.time}</div>\n            {/* @ts-ignore */}\n            <Button ref={focusRef4} label={\"Go to next exercise\"} onClick={update} colorScheme=\"teal\">Next bunch</Button>\n            <Button label={\"Start Over\"} onClick={reset}>Start Over</Button>\n        </div >\n    )\n};\n\n// able tab key only on the input that you should complete\n// disable copy/paste\n"]},"metadata":{},"sourceType":"module"}